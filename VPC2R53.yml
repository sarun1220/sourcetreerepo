---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud formation example to create VPC, IGW, public subnet, routetable,sg, ASg,Lc, elb & Route53
Parameters:
  AvailabilityZone:
    Type: String
    Default: us-east-1a
  ImageId:
    Type: String
    Default: ami-8c1be5f6
  userData:
    Type: String
    Default: |
      #!/bin/bash
      yum install httpd -y
      yum update -y
      service httpd start
      chkconfig httpd on
      echo "<html><h1>Hello VPC instances!</h1></html>" > /var/www/html/index.html
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: demo-vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Public
  OutboundConnectionRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Allows inbound http traffic
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      Tags:
      - Key: Name
        Value: http
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Allows inbound http traffic
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value: EC2SG
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: LoadBalancer
      Listeners:
      - InstancePort: 80
        InstanceProtocol: HTTP
        LoadBalancerPort: 80
        Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
      - Ref: WebServerSG
      Subnets:
      - Ref: PublicSubnet
  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Ref: ImageId
      InstanceType: t2.micro
      UserData:
        "Fn::Base64": !Ref userData
      SecurityGroups: 
        - Ref: EC2SG
    DependsOn: VPCGatewayAttachment
  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - Ref: AvailabilityZone
      DesiredCapacity: 1
      LaunchConfigurationName:
        Ref: AppLaunchConfiguration
      LoadBalancerNames:
      - Ref: LoadBalancer
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier:
      - Ref: PublicSubnet
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
  ROute53:
   Type: AWS::Route53::RecordSetGroup
   Properties:
     HostedZoneName: myrama.net.
     Comment: Zone apex alias targeted to  LoadBalancer.
     RecordSets:
     - Name: test.myrama.net.
       Type: A
       AliasTarget:
         HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneNameID
         DNSName: !GetAtt LoadBalancer.DNSName
 